{
    parserClass="com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="IdrPsi"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.zinoviy23.intellijIdris.lang.parser.psi"
    psiImplPackage="com.github.zinoviy23.intellijIdris.lang.parser.psi.impl"

    psiImplUtilClass="com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrPsiImplUtilKt"
    parserUtilClass="com.github.zinoviy23.intellijIdris.lang.parser.IdrParserUtil"

    elementTypeHolderClass="com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrTokenTypes"
    elementTypeClass="com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrElementType"
    tokenTypeClass="com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrTokenType"

    extends(".*expression")=expression
    extends(".*pattern")=pattern

    tokens=[
        LINE_COMMENT_START="--"
        LINE_COMMENT_TEXT="LINE_COMMENT_TEXT"
        DOC_COMMENT_START="|||"
        DOC_COMMENT_TEXT="DOC_COMMENT_TEXT"
        EOL="EOL"
    ]
}

file ::= eol* (module_statement eol+)? top_level ((eol+ top_level) | eol+ <<eof>>)*

private top_level ::= directive | import_statement | data_declaration | operator_declaration | function_specification | function_match

module_statement ::= KW_MODULE identificator_reference {
    pin = 1
}

import_statement ::= KW_IMPORT KW_PUBLIC? identificator_reference {
    pin = 1
}

directive ::= DIRECTIVE_START DIRECTIVE_TYPE DIRECTIVE_CONTENT {
    pin = 1
}

function_specification ::= [function_opts_list eol*] IDENTIFICATOR COLON_SIGN type_specification
{
    pin = 3
}

function_opts_list ::= function_opt (indent? function_opt)*

private function_opt ::= (KW_EXPORT | KW_TOTAL | KW_PARTIAL | KW_PRIVATE | KW_PUBLIC)

identificator_reference ::= IDENTIFICATOR (IDENTIFICATOR_SEP IDENTIFICATOR)*
{
    pin = 1
}

operator_declaration ::= (KW_INFIX | KW_PREFIX | KW_INFIXL | KW_INFIXR) INTEGER_LITERAL operator_list {
    pin = 1
}

data_declaration ::= [function_opts_list eol*] KW_DATA IDENTIFICATOR (IDENTIFICATOR)* data_body {
    pin = 2
}

data_body ::= (data_variants_body | data_constructors_body)

data_variants_body ::= indent? EQ_SIGN indent? data_declaration_variant (indent? OPT_SEP indent? data_declaration_variant)* {
    pin = 2
    extends=data_body
}

data_constructors_body ::= COLON_SIGN type_specification KW_WHERE data_constructors {
    pin = 1
    extends=data_body
}

private data_constructors ::= open (indented_start function_specification indented_end)* close

data_declaration_variant ::= IDENTIFICATOR (simple_expression)*

operator_list ::= OPERATOR (COMMA OPERATOR)*

type_specification ::= constraint_list? expression

constraint_list ::= expression indent? ARROW_SIGN indent?

function_match ::= IDENTIFICATOR (pattern)* indent? match_body {
    pin=5
}

private match_body ::= EQ_SIGN indent? expression [eol* function_where_block] | KW_IMPOSSIBLE {
    pin = 1
}

pattern ::= simple_expression_pattern | implicit_argument_pattern
simple_expression_pattern ::= simple_expression
implicit_argument_pattern ::= LBRACE IDENTIFICATOR [EQ_SIGN simple_expression] RBRACE {
    pin=1
}
function_call_pattern ::= function_call_expression

function_where_block ::= KW_WHERE open (indented_start (function_specification | function_match) indented_end)* close {
    pin = 1
    recoverWhile=where_recover
}

private where_recover ::= !(<<keepTerminator>>)

expression ::= type_expression |
               operator_expression |
               kw_expr |
               function_call_expression |
               simple_expression |
               lambda_expression
{
    recoverWhile = expression_recover
}

private expression_recover ::= !(eol+ IDENTIFICATOR)

simple_expression ::= list_literal_expression |
                      paren_expression |
                      named_pattern_expression |
                      id_expression |
                      hole_expression |
                      integer_literal_expression |
                      char_literal_expression |
                      string_literal_expression |
                      placeholder_expression

private kw_expr ::= if_expression |
                    case_expression |
                    let_expression


let_expression ::= KW_LET open (indented_start let_entry indented_end)+ close KW_IN eol* expression {
    pin = 1
}

let_entry ::= IDENTIFICATOR EQ_SIGN expression {
    pin = 2
}

type_expression ::= expression indent? TYPE_SIGN indent? expression (TYPE_SIGN indent? expression)*

id_expression ::= IDENTIFICATOR {
    methods=[getReference getName setName getUseScope]
    implements="com.intellij.psi.PsiNamedElement"
    extends=simple_expression
}

placeholder_expression ::= PLACEHOLDER {
    extends=simple_expression
}

hole_expression ::= HOLE_MARKER IDENTIFICATOR {
    pin = 1
    extends=simple_expression
}

integer_literal_expression ::= INTEGER_LITERAL {
    extends=simple_expression
}

string_literal_expression ::= STRING_QUOTE STRING_CONTENT? STRING_QUOTE {
    pin = 1
    extends=simple_expression
}

char_literal_expression ::= CHAR_QUOTE CHAR_CONTENT CHAR_QUOTE {
    pin = 1
    extends=simple_expression
}

paren_expression ::= LPAR eol* paren_expression_end {
    pin = 1
    extends=simple_expression
}

paren_expression_end ::= RPAR |
                         OPERATOR RPAR |
                         IDENTIFICATOR COLON_SIGN expression RPAR |
                         expression RPAR |
                         expression_list RPAR

expression_list ::= expression (COMMA expression)+

named_pattern_expression ::= IDENTIFICATOR PATTERN_NAME_SEP simple_expression {
    pin=2
}

if_expression ::= KW_IF eol* expression eol* if_then_branch eol* if_else_branch {
    pin = 1
}

if_then_branch ::= KW_THEN eol* expression { pin = 1 }
if_else_branch ::= KW_ELSE eol* expression { pin = 1 }

case_expression ::= KW_CASE eol* expression eol* KW_OF case_body
private case_body ::= open (indented_start case_entry indented_end)* close
case_entry ::= (function_call_pattern | pattern) ARROW_SIGN expression

list_literal_expression ::= LBRACKET [expression (COMMA expression)*] RBRACKET {
    pin = 1
    extends=simple_expression
}

operator_expression ::= operand indent? operator_element indent? operand (indent? operator_element indent? operand)*
operator_element ::= OPERATOR | escaped_name_id

private operand ::= function_call_expression | simple_expression

escaped_name_id ::= ESCAPED_NAME_QUOTE ESCAPED_NAME ESCAPED_NAME_QUOTE {
    pin = 1
}

function_call_expression ::= function_element (indent? simple_expression)*

private function_element ::= id_expression | paren_expression

lambda_expression ::= BACKSLASH IDENTIFICATOR ARROW_SIGN expression {
    pin = 2
}

private indent ::= eol* indent_gt
private eol ::= <<myEol>>

private indent_gt ::= <<parseIndentGt>>

private open ::= eol* <<openBlock>> <<pushIndent>>
private close ::= <<popIndent>> <<closeBlock>>

private indented_start ::= eol* <<notEndBlock>>
private indented_end ::= <<keepTerminator>>