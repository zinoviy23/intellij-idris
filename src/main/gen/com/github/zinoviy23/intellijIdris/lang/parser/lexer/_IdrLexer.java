// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _IdrLexer.flex

package com.github.zinoviy23.intellijIdris.lang.parser.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.ArrayDeque;

import static com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrTokenTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

class _IdrLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT = 2;
  public static final int IN_DOC_COMMENT = 4;
  public static final int IN_ID = 6;
  public static final int IN_DIRECTIVE_START = 8;
  public static final int IN_DIRECTIVE = 10;
  public static final int IN_STRING_LITERAL = 12;
  public static final int IN_LINE = 14;
  public static final int IN_ESCAPED_NAME = 16;
  public static final int IN_CHAR_LITERAL = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\0\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\2\5\1\12\1\13\1\14\1\5\1\15\11\16"+
    "\1\17\1\0\1\5\1\20\1\21\1\22\1\23\32\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\24"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\24\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\1\13\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\17"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\12\32\1\40\1\41\1\42\1\43"+
    "\1\11\1\44\1\45\1\46\1\45\16\0\1\47\1\50"+
    "\1\51\5\32\1\52\1\32\1\53\2\32\1\54\6\32"+
    "\1\17\13\0\1\55\4\0\6\32\1\56\10\32\1\57"+
    "\12\0\1\60\1\61\1\62\10\32\1\63\2\32\10\0"+
    "\2\32\1\64\5\32\1\65\1\66\5\0\1\67\1\70"+
    "\1\71\1\72\1\73\1\32\1\74\1\32\1\75\2\0"+
    "\1\76\1\77\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u0212\0\u027c\0\u02b1\0\u0212"+
    "\0\u02e6\0\u031b\0\u0212\0\u0350\0\u0350\0\u0212\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0212\0\u0212\0\u0212\0\u0636\0\u066b"+
    "\0\u0212\0\u0212\0\u0212\0\u0212\0\u06a0\0\u0212\0\u06d5\0\u0636"+
    "\0\u070a\0\u0212\0\u0212\0\u073f\0\u0212\0\u0636\0\u0212\0\u0774"+
    "\0\u0212\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u0212\0\u09bb\0\u0212\0\u09f0\0\u0a25"+
    "\0\u0212\0\u0212\0\u0212\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0636\0\u0636\0\u0774\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u073f\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u073f"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\u12d7\0\u0212\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u073f\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3"+
    "\0\u18d8\0\u073f\0\u073f\0\u073f\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u073f\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u073f"+
    "\0\u073f\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u073f\0\u073f"+
    "\0\u073f\0\u073f\0\u073f\0\u1f78\0\u073f\0\u1fad\0\u073f\0\u1fe2"+
    "\0\u2017\0\u073f\0\u073f\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\61\13\2\17\1\20\1\21"+
    "\61\17\2\22\1\20\1\21\61\22\14\13\1\23\7\13"+
    "\1\24\3\13\1\25\1\13\30\24\3\13\32\26\1\27"+
    "\2\26\1\30\1\31\1\32\1\26\1\33\1\34\1\26"+
    "\1\35\1\26\1\36\4\26\1\37\1\40\10\26\1\41"+
    "\1\42\1\20\1\21\61\41\2\43\1\20\1\21\1\44"+
    "\60\43\1\45\1\14\1\20\1\21\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\47\1\56\1\57"+
    "\1\60\1\61\1\47\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\2\64\1\72\1\73\1\74\3\64"+
    "\1\75\1\64\1\76\1\77\1\64\1\100\1\101\2\64"+
    "\1\102\2\64\1\103\3\64\1\104\1\105\1\106\1\107"+
    "\1\110\1\20\1\21\25\107\1\111\33\107\2\112\1\20"+
    "\1\21\3\112\1\113\16\112\1\114\36\112\66\0\1\14"+
    "\65\0\1\15\62\0\2\17\2\0\61\17\2\0\1\20"+
    "\62\0\2\22\2\0\61\22\7\0\1\24\5\0\2\24"+
    "\5\0\1\24\3\0\1\24\1\0\30\24\37\0\1\115"+
    "\66\0\1\116\21\0\1\117\55\0\1\120\57\0\1\121"+
    "\4\0\1\122\55\0\1\123\70\0\1\124\50\0\1\125"+
    "\7\0\1\126\4\0\1\127\47\0\1\130\73\0\1\131"+
    "\75\0\1\132\12\0\2\41\2\0\62\41\1\42\2\0"+
    "\61\41\2\43\3\0\60\43\5\0\1\47\5\0\2\47"+
    "\2\0\3\47\4\0\1\47\1\0\1\47\32\0\1\47"+
    "\1\0\1\50\3\0\61\50\5\0\1\47\5\0\1\133"+
    "\1\47\2\0\2\47\1\134\4\0\1\47\1\0\1\47"+
    "\32\0\1\47\16\0\2\57\53\0\1\47\5\0\2\47"+
    "\2\0\2\47\1\135\4\0\1\47\1\0\1\47\32\0"+
    "\1\47\10\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\30\64\10\0\1\47\1\0\1\64\3\0"+
    "\2\47\2\64\3\47\2\0\1\64\1\0\1\47\1\0"+
    "\1\136\1\0\30\64\1\0\1\47\10\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\1\137\27\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\1\140\27\64\12\0\1\64\5\0\2\64\5\0"+
    "\1\64\3\0\1\64\1\0\12\64\1\141\12\64\1\142"+
    "\2\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\5\64\1\143\5\64\1\144\1\145\13\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\4\64\1\146\23\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\15\64\1\147\12\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\5\64\1\150\22\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\1\151\16\64\1\152"+
    "\2\64\1\153\5\64\12\0\1\64\5\0\2\64\5\0"+
    "\1\64\3\0\1\64\1\0\7\64\1\154\5\64\1\155"+
    "\12\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\7\64\1\156\20\64\10\0\1\47\5\0"+
    "\2\47\2\0\3\47\4\0\1\47\1\0\1\47\32\0"+
    "\1\157\1\0\2\107\2\0\25\107\1\0\34\107\1\110"+
    "\2\0\25\107\1\0\33\107\7\0\1\112\16\0\1\112"+
    "\72\0\1\160\67\0\1\161\10\0\1\162\62\0\1\163"+
    "\67\0\1\164\45\0\1\165\64\0\1\166\3\0\1\167"+
    "\63\0\1\170\63\0\1\171\76\0\1\172\51\0\1\173"+
    "\12\0\1\174\56\0\1\175\71\0\1\170\51\0\1\176"+
    "\70\0\1\177\26\0\1\133\3\0\61\133\7\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\20\64"+
    "\1\200\7\64\12\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\21\64\1\201\6\64\12\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\20\64"+
    "\1\202\7\64\12\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\16\64\1\203\11\64\12\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\16\64"+
    "\1\204\11\64\12\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\5\64\1\205\22\64\12\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\21\64"+
    "\1\206\6\64\12\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\3\64\1\207\24\64\12\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\17\64"+
    "\1\210\10\64\12\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\4\64\1\211\3\64\1\212\17\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\213\26\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\4\64\1\214\23\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\21\64\1\215\6\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\4\64\1\216\23\64"+
    "\10\0\1\47\5\0\2\47\2\0\3\47\4\0\1\47"+
    "\1\0\1\47\32\0\1\217\37\0\1\220\60\0\1\221"+
    "\103\0\1\222\45\0\1\223\101\0\1\224\55\0\1\173"+
    "\64\0\1\225\62\0\1\226\64\0\1\173\72\0\1\227"+
    "\60\0\1\230\67\0\1\173\61\0\1\231\102\0\1\173"+
    "\43\0\1\173\36\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\4\64\1\232\23\64\12\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\1\233"+
    "\27\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\4\64\1\234\23\64\12\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\15\64\1\235"+
    "\12\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\15\64\1\236\12\64\12\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\10\64\1\237"+
    "\17\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\22\64\1\240\5\64\12\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\21\64\1\241"+
    "\6\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\5\64\1\242\22\64\12\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\23\64\1\243"+
    "\4\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\12\64\1\244\15\64\12\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\14\64\1\245"+
    "\13\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\1\246\27\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\17\64\1\247\10\64"+
    "\3\0\1\217\3\0\61\217\52\0\1\250\66\0\1\251"+
    "\46\0\1\252\73\0\1\253\70\0\1\254\55\0\1\255"+
    "\103\0\1\170\57\0\1\123\64\0\1\256\52\0\1\257"+
    "\31\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\17\64\1\260\10\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\17\64\1\261\10\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\25\64\1\262\2\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\12\64\1\263\15\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\10\64\1\264\17\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\10\64\1\265\17\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\1\266\27\64\12\0\1\64\5\0\2\64\5\0"+
    "\1\64\3\0\1\64\1\0\10\64\1\267\17\64\12\0"+
    "\1\64\5\0\2\64\5\0\1\64\3\0\1\64\1\0"+
    "\12\64\1\270\15\64\12\0\1\64\5\0\2\64\5\0"+
    "\1\64\3\0\1\64\1\0\4\64\1\271\23\64\55\0"+
    "\1\173\56\0\1\272\54\0\1\273\72\0\1\274\52\0"+
    "\1\275\100\0\1\170\52\0\1\276\100\0\1\165\25\0"+
    "\1\64\5\0\2\64\5\0\1\64\3\0\1\64\1\0"+
    "\21\64\1\277\6\64\12\0\1\64\5\0\2\64\5\0"+
    "\1\64\3\0\1\64\1\0\21\64\1\300\6\64\12\0"+
    "\1\64\5\0\2\64\5\0\1\64\3\0\1\64\1\0"+
    "\12\64\1\301\4\64\1\302\10\64\12\0\1\64\5\0"+
    "\2\64\5\0\1\64\3\0\1\64\1\0\4\64\1\303"+
    "\23\64\12\0\1\64\5\0\2\64\5\0\1\64\3\0"+
    "\1\64\1\0\1\304\27\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\25\64\1\305\2\64"+
    "\12\0\1\64\5\0\2\64\5\0\1\64\3\0\1\64"+
    "\1\0\21\64\1\306\6\64\12\0\1\64\5\0\2\64"+
    "\5\0\1\64\3\0\1\64\1\0\2\64\1\307\25\64"+
    "\56\0\1\173\43\0\1\310\66\0\1\173\71\0\1\311"+
    "\63\0\1\170\33\0\1\64\5\0\2\64\5\0\1\64"+
    "\3\0\1\64\1\0\12\64\1\312\15\64\12\0\1\64"+
    "\5\0\2\64\5\0\1\64\3\0\1\64\1\0\4\64"+
    "\1\313\23\64\56\0\1\132\43\0\1\314\100\0\1\315"+
    "\53\0\1\316\73\0\1\317\56\0\1\320\77\0\1\250"+
    "\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8533];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\15\1\3\11\2\1\4\11\1\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\12\1\1\11\1\1\1\11\2\1\3\11\1\1\16\0"+
    "\25\1\13\0\1\11\4\0\20\1\12\0\16\1\10\0"+
    "\12\1\5\0\11\1\2\0\2\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _IdrLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yypushback(1); yybegin(IN_LINE);
            }
          // fall through
          case 64: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 65: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 66: break;
          case 4:
            { return LINE_COMMENT_TEXT;
            }
          // fall through
          case 67: break;
          case 5:
            { yybegin(YYINITIAL); return EOL;
            }
          // fall through
          case 68: break;
          case 6:
            { return DOC_COMMENT_TEXT;
            }
          // fall through
          case 69: break;
          case 7:
            { return IDENTIFICATOR_SEP;
            }
          // fall through
          case 70: break;
          case 8:
            { return IDENTIFICATOR;
            }
          // fall through
          case 71: break;
          case 9:
            { yybegin(IN_LINE); return BAD_CHARACTER;
            }
          // fall through
          case 72: break;
          case 10:
            { return DIRECTIVE_CONTENT;
            }
          // fall through
          case 73: break;
          case 11:
            { return STRING_CONTENT;
            }
          // fall through
          case 74: break;
          case 12:
            { yybegin(IN_LINE); return STRING_QUOTE;
            }
          // fall through
          case 75: break;
          case 13:
            { return BAD_CHARACTER;
            }
          // fall through
          case 76: break;
          case 14:
            { yybegin(IN_STRING_LITERAL); return STRING_QUOTE;
            }
          // fall through
          case 77: break;
          case 15:
            { return OPERATOR;
            }
          // fall through
          case 78: break;
          case 16:
            { yybegin(IN_DIRECTIVE_START); yypushback(yylength() - 1);  return DIRECTIVE_START;
            }
          // fall through
          case 79: break;
          case 17:
            { yybegin(IN_CHAR_LITERAL); return CHAR_QUOTE;
            }
          // fall through
          case 80: break;
          case 18:
            { return LPAR;
            }
          // fall through
          case 81: break;
          case 19:
            { return RPAR;
            }
          // fall through
          case 82: break;
          case 20:
            { return COMMA;
            }
          // fall through
          case 83: break;
          case 21:
            { return INTEGER_LITERAL;
            }
          // fall through
          case 84: break;
          case 22:
            { return COLON_SIGN;
            }
          // fall through
          case 85: break;
          case 23:
            { return EQ_SIGN;
            }
          // fall through
          case 86: break;
          case 24:
            { return HOLE_MARKER;
            }
          // fall through
          case 87: break;
          case 25:
            { return PATTERN_NAME_SEP;
            }
          // fall through
          case 88: break;
          case 26:
            { yybegin(IN_ID); return IDENTIFICATOR;
            }
          // fall through
          case 89: break;
          case 27:
            { return LBRACKET;
            }
          // fall through
          case 90: break;
          case 28:
            { return BACKSLASH;
            }
          // fall through
          case 91: break;
          case 29:
            { return RBRACKET;
            }
          // fall through
          case 92: break;
          case 30:
            { return PLACEHOLDER;
            }
          // fall through
          case 93: break;
          case 31:
            { yybegin(IN_ESCAPED_NAME); return ESCAPED_NAME_QUOTE;
            }
          // fall through
          case 94: break;
          case 32:
            { return LBRACE;
            }
          // fall through
          case 95: break;
          case 33:
            { return OPT_SEP;
            }
          // fall through
          case 96: break;
          case 34:
            { return RBRACE;
            }
          // fall through
          case 97: break;
          case 35:
            { return ESCAPED_NAME;
            }
          // fall through
          case 98: break;
          case 36:
            { yybegin(IN_LINE); return ESCAPED_NAME_QUOTE;
            }
          // fall through
          case 99: break;
          case 37:
            { return CHAR_CONTENT;
            }
          // fall through
          case 100: break;
          case 38:
            { yybegin(IN_LINE); return CHAR_QUOTE;
            }
          // fall through
          case 101: break;
          case 39:
            { yybegin(IN_LINE_COMMENT);  yypushback(yylength() - 2); return LINE_COMMENT_START;
            }
          // fall through
          case 102: break;
          case 40:
            { return TYPE_SIGN;
            }
          // fall through
          case 103: break;
          case 41:
            { return ARROW_SIGN;
            }
          // fall through
          case 104: break;
          case 42:
            { return KW_IF;
            }
          // fall through
          case 105: break;
          case 43:
            { return KW_IN;
            }
          // fall through
          case 106: break;
          case 44:
            { return KW_OF;
            }
          // fall through
          case 107: break;
          case 45:
            { yybegin(IN_DIRECTIVE); return DIRECTIVE_TYPE;
            }
          // fall through
          case 108: break;
          case 46:
            { return KW_LET;
            }
          // fall through
          case 109: break;
          case 47:
            { yybegin(IN_DOC_COMMENT); yypushback(yylength() - 3); return DOC_COMMENT_START;
            }
          // fall through
          case 110: break;
          case 48:
            { return KW_CASE;
            }
          // fall through
          case 111: break;
          case 49:
            { return KW_DATA;
            }
          // fall through
          case 112: break;
          case 50:
            { return KW_ELSE;
            }
          // fall through
          case 113: break;
          case 51:
            { return KW_THEN;
            }
          // fall through
          case 114: break;
          case 52:
            { return KW_INFIX;
            }
          // fall through
          case 115: break;
          case 53:
            { return KW_TOTAL;
            }
          // fall through
          case 116: break;
          case 54:
            { return KW_WHERE;
            }
          // fall through
          case 117: break;
          case 55:
            { return KW_EXPORT;
            }
          // fall through
          case 118: break;
          case 56:
            { return KW_IMPORT;
            }
          // fall through
          case 119: break;
          case 57:
            { return KW_INFIXL;
            }
          // fall through
          case 120: break;
          case 58:
            { return KW_INFIXR;
            }
          // fall through
          case 121: break;
          case 59:
            { return KW_MODULE;
            }
          // fall through
          case 122: break;
          case 60:
            { return KW_PREFIX;
            }
          // fall through
          case 123: break;
          case 61:
            { return KW_PUBLIC;
            }
          // fall through
          case 124: break;
          case 62:
            { return KW_PARTIAL;
            }
          // fall through
          case 125: break;
          case 63:
            { return KW_PRIVATE;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
