// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _IdrLexer.flex

package com.github.zinoviy23.intellijIdris.lang.parser.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.ArrayDeque;

import static com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrTokenTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

class _IdrLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT = 2;
  public static final int IN_DOC_COMMENT = 4;
  public static final int IN_ID = 6;
  public static final int IN_DIRECTIVE_START = 8;
  public static final int IN_DIRECTIVE = 10;
  public static final int IN_STRING_LITERAL = 12;
  public static final int IN_LINE = 14;
  public static final int IN_ESCAPED_NAME = 16;
  public static final int IN_CHAR_LITERAL = 18;
  public static final int IN_MULTILINE_COMMENT = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\0\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\2\5\1\12\1\13\1\14\1\5\1\15\11\16"+
    "\1\17\1\0\1\5\1\20\1\21\1\22\1\23\6\24"+
    "\24\25\1\26\1\27\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\25\1\44\1\45\1\46\1\47\1\50\1\51\1\25"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\5\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\2\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\1\13\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\17"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\13\32\1\40\1\41\1\42\1\43"+
    "\1\11\1\44\1\45\1\46\1\45\1\47\17\0\1\50"+
    "\1\51\1\0\1\52\6\32\1\53\1\32\1\54\2\32"+
    "\1\55\7\32\1\56\1\17\1\0\1\57\13\0\1\60"+
    "\4\0\1\25\10\32\1\61\11\32\1\62\1\45\12\0"+
    "\1\63\1\32\1\64\1\65\13\32\1\66\2\32\1\45"+
    "\10\0\5\32\1\67\7\32\1\70\1\71\1\45\5\0"+
    "\1\32\1\72\1\32\1\73\1\32\1\74\1\75\1\32"+
    "\1\76\1\32\1\77\1\32\1\100\1\101\2\0\4\32"+
    "\1\102\1\103\1\0\4\32\1\0\3\32\1\104\1\0"+
    "\2\32\1\105\1\0\1\106\1\32\1\0\2\32\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u0252\0\u02be\0\u02f4"+
    "\0\u0252\0\u032a\0\u0360\0\u0252\0\u0396\0\u0396\0\u0252\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u0252\0\u0252\0\u0252\0\u068a"+
    "\0\u06c0\0\u0252\0\u0252\0\u0252\0\u0252\0\u06f6\0\u072c\0\u0762"+
    "\0\u068a\0\u0798\0\u0252\0\u0252\0\u07ce\0\u0252\0\u068a\0\u0252"+
    "\0\u0804\0\u0252\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0252"+
    "\0\u0af8\0\u0b2e\0\u0252\0\u0252\0\u0252\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u068a"+
    "\0\u0f30\0\u068a\0\u0804\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u07ce\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u07ce\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u0252\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u0252\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u0252\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u07ce\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u07ce\0\u1cb0\0\u07ce\0\u07ce\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u07ce"+
    "\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2"+
    "\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262"+
    "\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412"+
    "\0\u07ce\0\u07ce\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556"+
    "\0\u258c\0\u07ce\0\u25c2\0\u07ce\0\u25f8\0\u07ce\0\u07ce\0\u262e"+
    "\0\u07ce\0\u2664\0\u07ce\0\u269a\0\u07ce\0\u07ce\0\u26d0\0\u2706"+
    "\0\u273c\0\u2772\0\u27a8\0\u27de\0\u07ce\0\u07ce\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u07ce"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u07ce\0\u2a9c\0\u07ce\0\u2ad2\0\u2b08"+
    "\0\u2b3e\0\u2b74\0\u07ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\62\14\2\20\1\21\1\22"+
    "\62\20\2\23\1\21\1\22\62\23\14\14\1\24\7\14"+
    "\2\25\3\14\1\26\1\14\30\25\3\14\33\27\1\30"+
    "\2\27\1\31\1\32\1\33\1\27\1\34\1\35\1\27"+
    "\1\36\1\27\1\37\4\27\1\40\1\41\10\27\1\42"+
    "\1\43\1\21\1\22\62\42\2\44\1\21\1\22\1\45"+
    "\61\44\1\46\1\15\1\21\1\22\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\50\1\57\1\60"+
    "\1\61\1\62\1\50\1\63\1\64\2\65\1\66\1\67"+
    "\1\70\1\71\1\72\2\65\1\73\1\74\1\75\3\65"+
    "\1\76\1\65\1\77\1\100\1\65\1\101\1\102\1\103"+
    "\1\65\1\104\2\65\1\105\3\65\1\106\1\107\1\110"+
    "\1\111\1\112\1\21\1\22\26\111\1\113\33\111\2\114"+
    "\1\21\1\22\3\114\1\115\17\114\1\116\36\114\13\117"+
    "\1\120\51\117\70\0\1\15\66\0\1\16\63\0\2\20"+
    "\2\0\62\20\2\0\1\21\63\0\2\23\2\0\62\23"+
    "\7\0\1\25\5\0\2\25\5\0\2\25\3\0\1\25"+
    "\1\0\30\25\40\0\1\121\67\0\1\122\21\0\1\123"+
    "\56\0\1\124\60\0\1\125\4\0\1\126\56\0\1\127"+
    "\71\0\1\130\51\0\1\131\7\0\1\132\4\0\1\133"+
    "\50\0\1\134\74\0\1\135\76\0\1\136\12\0\2\42"+
    "\2\0\63\42\1\43\2\0\62\42\2\44\3\0\61\44"+
    "\5\0\1\50\5\0\2\50\2\0\3\50\5\0\1\50"+
    "\1\0\1\50\32\0\1\50\1\0\1\51\3\0\62\51"+
    "\5\0\1\50\5\0\1\137\1\50\2\0\2\50\1\140"+
    "\5\0\1\50\1\0\1\50\32\0\1\50\61\0\1\141"+
    "\22\0\2\60\5\0\1\60\6\0\6\60\32\0\1\50"+
    "\5\0\2\50\2\0\2\50\1\142\5\0\1\50\1\0"+
    "\1\50\32\0\1\50\10\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\30\65\10\0\1\50\1\0"+
    "\1\65\3\0\2\50\2\65\3\50\2\0\2\65\1\0"+
    "\1\50\1\0\1\143\1\0\30\65\1\0\1\50\10\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\1\144\14\65\1\145\12\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\1\146\27\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\12\65\1\147\12\65\1\150\2\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\5\65\1\151"+
    "\5\65\1\152\1\153\13\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\4\65\1\154\23\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\15\65\1\155\12\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\5\65\1\156\22\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\1\157\16\65\1\160\2\65\1\161\5\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\4\65\1\162\23\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\7\65\1\163\5\65\1\164"+
    "\12\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\7\65\1\165\20\65\16\0\1\166\57\0"+
    "\1\50\5\0\2\50\2\0\3\50\5\0\1\50\1\0"+
    "\1\50\32\0\1\167\1\0\2\111\2\0\26\111\1\0"+
    "\34\111\1\112\2\0\26\111\1\0\33\111\7\0\1\114"+
    "\5\0\1\114\11\0\1\114\10\0\1\114\6\0\1\114"+
    "\2\0\1\114\1\0\1\114\1\0\1\114\1\0\1\170"+
    "\5\0\13\117\1\0\51\117\66\0\1\171\35\0\1\172"+
    "\70\0\1\173\10\0\1\174\63\0\1\175\70\0\1\176"+
    "\46\0\1\177\65\0\1\200\3\0\1\201\64\0\1\202"+
    "\64\0\1\203\77\0\1\204\52\0\1\205\12\0\1\206"+
    "\57\0\1\207\72\0\1\202\52\0\1\210\71\0\1\211"+
    "\26\0\1\137\3\0\62\137\15\0\1\212\1\60\5\0"+
    "\1\60\6\0\6\60\34\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\20\65\1\213\7\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\14\65\1\214\13\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\21\65\1\215\6\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\20\65\1\216\7\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\16\65\1\217\11\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\16\65\1\220\11\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\5\65\1\221\13\65\1\222"+
    "\6\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\21\65\1\223\6\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\3\65\1\224"+
    "\24\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\17\65\1\225\10\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\4\65\1\226"+
    "\3\65\1\227\17\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\1\65\1\230\26\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\2\65\1\231\25\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\4\65\1\232\23\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\21\65\1\233\6\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\4\65\1\234\23\65\3\0"+
    "\1\166\3\0\62\166\5\0\1\50\5\0\2\50\2\0"+
    "\3\50\5\0\1\50\1\0\1\50\32\0\1\235\16\0"+
    "\2\236\5\0\1\236\6\0\6\236\64\0\1\237\61\0"+
    "\1\240\104\0\1\241\46\0\1\242\102\0\1\243\56\0"+
    "\1\205\65\0\1\244\63\0\1\245\65\0\1\205\73\0"+
    "\1\246\61\0\1\247\70\0\1\205\62\0\1\250\103\0"+
    "\1\205\44\0\1\205\36\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\4\65\1\251\23\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\20\65\1\252\7\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\1\253\27\65\12\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\4\65"+
    "\1\254\23\65\12\0\1\65\5\0\2\65\5\0\2\65"+
    "\3\0\1\65\1\0\15\65\1\255\12\65\12\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\12\65"+
    "\1\256\2\65\1\257\12\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\10\65\1\260\17\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\4\65\1\261\23\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\22\65\1\262\5\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\21\65\1\263\6\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\5\65\1\264\22\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\23\65\1\265\4\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\12\65\1\266\15\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\15\65\1\267\12\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\14\65\1\270\13\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\1\271\27\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\17\65\1\272\10\65\3\0"+
    "\1\235\3\0\62\235\15\0\2\273\5\0\1\273\6\0"+
    "\6\273\100\0\1\274\67\0\1\275\47\0\1\276\74\0"+
    "\1\277\71\0\1\300\56\0\1\301\104\0\1\202\60\0"+
    "\1\127\65\0\1\302\53\0\1\303\31\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\21\65\1\304"+
    "\6\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\17\65\1\305\10\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\4\65\1\306"+
    "\23\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\17\65\1\307\1\310\7\65\12\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\25\65"+
    "\1\311\2\65\12\0\1\65\5\0\2\65\5\0\2\65"+
    "\3\0\1\65\1\0\17\65\1\312\10\65\12\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\12\65"+
    "\1\313\15\65\12\0\1\65\5\0\2\65\5\0\2\65"+
    "\3\0\1\65\1\0\10\65\1\314\17\65\12\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\10\65"+
    "\1\315\17\65\12\0\1\65\5\0\2\65\5\0\2\65"+
    "\3\0\1\65\1\0\1\316\27\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\10\65\1\317"+
    "\17\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\17\65\1\320\10\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\12\65\1\321"+
    "\15\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\4\65\1\322\23\65\20\0\2\323\5\0"+
    "\1\323\6\0\6\323\100\0\1\205\57\0\1\324\55\0"+
    "\1\325\73\0\1\326\53\0\1\327\101\0\1\202\53\0"+
    "\1\330\101\0\1\177\25\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\17\65\1\331\10\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\21\65\1\332\6\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\13\65\1\333\14\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\21\65\1\334\6\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\20\65\1\335\7\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\12\65\1\336\4\65\1\337\10\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\5\65\1\340"+
    "\22\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\4\65\1\341\23\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\1\342\27\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\25\65\1\343\2\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\21\65\1\344\6\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\2\65\1\345\25\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\3\65\1\346\24\65"+
    "\20\0\2\114\5\0\1\114\6\0\6\114\101\0\1\205"+
    "\44\0\1\347\67\0\1\205\72\0\1\350\64\0\1\202"+
    "\33\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\22\65\1\351\5\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\4\65\1\352\23\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\10\65\1\353\17\65\12\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\1\354\27\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\12\65\1\355\15\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\4\65\1\356\23\65\57\0"+
    "\1\136\44\0\1\357\41\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\2\65\1\360\25\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\14\65\1\361\13\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\1\65\1\362\26\65\12\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\2\65\1\363\25\65\52\0\1\364\25\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\21\65\1\365"+
    "\6\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\21\65\1\366\6\65\12\0\1\65\5\0"+
    "\2\65\5\0\2\65\3\0\1\65\1\0\12\65\1\367"+
    "\15\65\12\0\1\65\5\0\2\65\5\0\2\65\3\0"+
    "\1\65\1\0\4\65\1\370\23\65\41\0\1\371\36\0"+
    "\1\65\5\0\2\65\5\0\2\65\3\0\1\65\1\0"+
    "\15\65\1\372\12\65\12\0\1\65\5\0\2\65\5\0"+
    "\2\65\3\0\1\65\1\0\1\373\27\65\12\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\4\65"+
    "\1\374\23\65\50\0\1\375\27\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\17\65\1\376\10\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\21\65\1\377\6\65\42\0\1\u0100\35\0\1\65"+
    "\5\0\2\65\5\0\2\65\3\0\1\65\1\0\10\65"+
    "\1\u0101\17\65\55\0\1\274\22\0\1\65\5\0\2\65"+
    "\5\0\2\65\3\0\1\65\1\0\15\65\1\u0102\12\65"+
    "\12\0\1\65\5\0\2\65\5\0\2\65\3\0\1\65"+
    "\1\0\14\65\1\u0103\13\65\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11178];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\11\15\1\3\11\2\1\4\11\5\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\15\1\1\11"+
    "\2\1\3\11\2\1\17\0\2\1\1\0\26\1\1\0"+
    "\1\11\13\0\1\11\4\0\1\11\24\1\12\0\23\1"+
    "\10\0\20\1\5\0\16\1\2\0\6\1\1\0\4\1"+
    "\1\0\4\1\1\0\3\1\1\0\2\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _IdrLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yypushback(1); yybegin(IN_LINE);
            }
          // fall through
          case 72: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 74: break;
          case 4:
            { return LINE_COMMENT_TEXT;
            }
          // fall through
          case 75: break;
          case 5:
            { yybegin(YYINITIAL); return EOL;
            }
          // fall through
          case 76: break;
          case 6:
            { return DOC_COMMENT_TEXT;
            }
          // fall through
          case 77: break;
          case 7:
            { return IDENTIFICATOR_SEP;
            }
          // fall through
          case 78: break;
          case 8:
            { return IDENTIFICATOR;
            }
          // fall through
          case 79: break;
          case 9:
            { yybegin(IN_LINE); return BAD_CHARACTER;
            }
          // fall through
          case 80: break;
          case 10:
            { return DIRECTIVE_CONTENT;
            }
          // fall through
          case 81: break;
          case 11:
            { return STRING_CONTENT;
            }
          // fall through
          case 82: break;
          case 12:
            { yybegin(IN_LINE); return STRING_QUOTE;
            }
          // fall through
          case 83: break;
          case 13:
            { return BAD_CHARACTER;
            }
          // fall through
          case 84: break;
          case 14:
            { yybegin(IN_STRING_LITERAL); return STRING_QUOTE;
            }
          // fall through
          case 85: break;
          case 15:
            { return OPERATOR;
            }
          // fall through
          case 86: break;
          case 16:
            { yybegin(IN_DIRECTIVE_START); yypushback(yylength() - 1);  return DIRECTIVE_START;
            }
          // fall through
          case 87: break;
          case 17:
            { yybegin(IN_CHAR_LITERAL); return CHAR_QUOTE;
            }
          // fall through
          case 88: break;
          case 18:
            { return LPAR;
            }
          // fall through
          case 89: break;
          case 19:
            { return RPAR;
            }
          // fall through
          case 90: break;
          case 20:
            { return COMMA;
            }
          // fall through
          case 91: break;
          case 21:
            { return INTEGER_LITERAL;
            }
          // fall through
          case 92: break;
          case 22:
            { return COLON_SIGN;
            }
          // fall through
          case 93: break;
          case 23:
            { return EQ_SIGN;
            }
          // fall through
          case 94: break;
          case 24:
            { return HOLE_MARKER;
            }
          // fall through
          case 95: break;
          case 25:
            { return PATTERN_NAME_SEP;
            }
          // fall through
          case 96: break;
          case 26:
            { yybegin(IN_ID); return IDENTIFICATOR;
            }
          // fall through
          case 97: break;
          case 27:
            { return LBRACKET;
            }
          // fall through
          case 98: break;
          case 28:
            { return BACKSLASH;
            }
          // fall through
          case 99: break;
          case 29:
            { return RBRACKET;
            }
          // fall through
          case 100: break;
          case 30:
            { return PLACEHOLDER;
            }
          // fall through
          case 101: break;
          case 31:
            { yybegin(IN_ESCAPED_NAME); return ESCAPED_NAME_QUOTE;
            }
          // fall through
          case 102: break;
          case 32:
            { return LBRACE;
            }
          // fall through
          case 103: break;
          case 33:
            { return OPT_SEP;
            }
          // fall through
          case 104: break;
          case 34:
            { return RBRACE;
            }
          // fall through
          case 105: break;
          case 35:
            { return ESCAPED_NAME;
            }
          // fall through
          case 106: break;
          case 36:
            { yybegin(IN_LINE); return ESCAPED_NAME_QUOTE;
            }
          // fall through
          case 107: break;
          case 37:
            { return CHAR_CONTENT;
            }
          // fall through
          case 108: break;
          case 38:
            { yybegin(IN_LINE); return CHAR_QUOTE;
            }
          // fall through
          case 109: break;
          case 39:
            { return MULTILINE_COMMENT_TEXT;
            }
          // fall through
          case 110: break;
          case 40:
            { yybegin(IN_LINE_COMMENT);  yypushback(yylength() - 2); return LINE_COMMENT_START;
            }
          // fall through
          case 111: break;
          case 41:
            { return TYPE_SIGN;
            }
          // fall through
          case 112: break;
          case 42:
            { return ARROW_SIGN;
            }
          // fall through
          case 113: break;
          case 43:
            { return KW_IF;
            }
          // fall through
          case 114: break;
          case 44:
            { return KW_IN;
            }
          // fall through
          case 115: break;
          case 45:
            { return KW_OF;
            }
          // fall through
          case 116: break;
          case 46:
            { yybegin(IN_MULTILINE_COMMENT); yypushback(yylength() - 2); return MULTILINE_COMMENT_START;
            }
          // fall through
          case 117: break;
          case 47:
            { yybegin(IN_LINE); return MULTILINE_COMMENT_END;
            }
          // fall through
          case 118: break;
          case 48:
            { yybegin(IN_DIRECTIVE); return DIRECTIVE_TYPE;
            }
          // fall through
          case 119: break;
          case 49:
            { return KW_LET;
            }
          // fall through
          case 120: break;
          case 50:
            { yybegin(IN_DOC_COMMENT); yypushback(yylength() - 3); return DOC_COMMENT_START;
            }
          // fall through
          case 121: break;
          case 51:
            { return KW_CASE;
            }
          // fall through
          case 122: break;
          case 52:
            { return KW_DATA;
            }
          // fall through
          case 123: break;
          case 53:
            { return KW_ELSE;
            }
          // fall through
          case 124: break;
          case 54:
            { return KW_THEN;
            }
          // fall through
          case 125: break;
          case 55:
            { return KW_INFIX;
            }
          // fall through
          case 126: break;
          case 56:
            { return KW_TOTAL;
            }
          // fall through
          case 127: break;
          case 57:
            { return KW_WHERE;
            }
          // fall through
          case 128: break;
          case 58:
            { return KW_EXPORT;
            }
          // fall through
          case 129: break;
          case 59:
            { return KW_IMPORT;
            }
          // fall through
          case 130: break;
          case 60:
            { return KW_INFIXL;
            }
          // fall through
          case 131: break;
          case 61:
            { return KW_INFIXR;
            }
          // fall through
          case 132: break;
          case 62:
            { return KW_MODULE;
            }
          // fall through
          case 133: break;
          case 63:
            { return KW_PREFIX;
            }
          // fall through
          case 134: break;
          case 64:
            { return KW_PUBLIC;
            }
          // fall through
          case 135: break;
          case 65:
            { return KW_RECORD;
            }
          // fall through
          case 136: break;
          case 66:
            { return KW_PARTIAL;
            }
          // fall through
          case 137: break;
          case 67:
            { return KW_PRIVATE;
            }
          // fall through
          case 138: break;
          case 68:
            { return KW_INTERFACE;
            }
          // fall through
          case 139: break;
          case 69:
            { return KW_IMPOSSIBLE;
            }
          // fall through
          case 140: break;
          case 70:
            { return KW_CONSTRUCTOR;
            }
          // fall through
          case 141: break;
          case 71:
            { return KW_IMPLEMENTATION;
            }
          // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
