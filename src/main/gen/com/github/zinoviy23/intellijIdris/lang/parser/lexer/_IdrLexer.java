// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _IdrLexer.flex

package com.github.zinoviy23.intellijIdris.lang.parser.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.ArrayDeque;

import static com.github.zinoviy23.intellijIdris.lang.parser.psi.IdrTokenTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

class _IdrLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT = 2;
  public static final int IN_DOC_COMMENT = 4;
  public static final int IN_ID = 6;
  public static final int IN_DIRECTIVE_START = 8;
  public static final int IN_DIRECTIVE = 10;
  public static final int IN_STRING_LITERAL = 12;
  public static final int IN_OPEN = 14;
  public static final int IN_LINE = 16;
  public static final int IN_ESCAPED_NAME = 18;
  public static final int IN_CHAR_LITERAL = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\0\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\2\5\1\12\1\13\1\14\1\5\1\15\11\16"+
    "\1\17\1\0\1\5\1\20\1\21\1\22\1\23\32\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\24"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\24\1\51"+
    "\1\52\1\53\1\54\1\24\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\2\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\11\1\7\13\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\14\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\22\2\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\12\35\1\43"+
    "\1\44\1\45\1\46\1\12\1\47\1\50\1\51\16\0"+
    "\1\52\1\53\1\54\5\35\1\55\1\35\1\56\2\35"+
    "\1\57\5\35\1\22\13\0\1\60\4\0\6\35\1\61"+
    "\6\35\1\62\12\0\1\63\1\64\1\65\6\35\1\66"+
    "\2\35\10\0\2\35\1\67\3\35\1\70\1\71\5\0"+
    "\1\72\1\73\1\74\1\75\1\76\1\35\1\77\2\0"+
    "\1\100\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u023c\0\u02a4\0\u02d8"+
    "\0\u023c\0\u030c\0\u0340\0\u023c\0\u023c\0\u0374\0\u0374\0\u023c"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u023c\0\u023c\0\u023c"+
    "\0\u064c\0\u023c\0\u0680\0\u06b4\0\u023c\0\u023c\0\u023c\0\u023c"+
    "\0\u06e8\0\u023c\0\u071c\0\u0680\0\u0750\0\u023c\0\u023c\0\u0784"+
    "\0\u023c\0\u0680\0\u023c\0\u07b8\0\u023c\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u023c"+
    "\0\u09f4\0\u023c\0\u0a28\0\u0a5c\0\u023c\0\u023c\0\u023c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0680\0\u0680"+
    "\0\u07b8\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0784\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0784\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u023c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u0784"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4"+
    "\0\u17f8\0\u0784\0\u0784\0\u0784\0\u182c\0\u1860\0\u1894\0\u18c8"+
    "\0\u18fc\0\u1930\0\u0784\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\u1c08\0\u1c3c\0\u1c70\0\u0784\0\u0784\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u0784\0\u0784\0\u0784\0\u0784\0\u0784\0\u1da8"+
    "\0\u0784\0\u1ddc\0\u1e10\0\u0784\0\u1e44\0\u1e78\0\u1eac\0\u1ee0"+
    "\0\u1f14";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\60\14\2\20\1\21\1\22"+
    "\60\20\2\23\1\21\1\22\60\23\14\24\1\25\7\24"+
    "\1\26\3\24\1\27\1\24\27\26\3\24\32\30\1\31"+
    "\2\30\1\32\1\33\1\34\1\30\1\35\1\36\1\30"+
    "\1\37\1\30\1\40\4\30\1\41\1\42\7\30\1\43"+
    "\1\44\1\21\1\22\60\43\2\45\1\21\1\22\1\46"+
    "\57\45\64\47\1\50\1\51\1\21\1\22\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\62"+
    "\1\63\1\64\1\65\1\53\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\2\70\1\76\1\77\1\100"+
    "\3\70\1\101\1\70\1\102\1\103\1\70\1\104\1\105"+
    "\2\70\1\106\1\70\1\107\3\70\1\110\1\111\1\112"+
    "\1\113\1\114\1\21\1\22\25\113\1\115\32\113\2\116"+
    "\1\21\1\22\3\116\1\117\54\116\65\0\1\15\64\0"+
    "\1\16\61\0\2\20\2\0\60\20\2\0\1\21\61\0"+
    "\2\23\2\0\60\23\7\0\1\26\5\0\2\26\5\0"+
    "\1\26\3\0\1\26\1\0\27\26\37\0\1\120\65\0"+
    "\1\121\20\0\1\122\55\0\1\123\56\0\1\124\4\0"+
    "\1\125\54\0\1\126\67\0\1\127\47\0\1\130\7\0"+
    "\1\131\4\0\1\132\46\0\1\133\72\0\1\134\74\0"+
    "\1\135\11\0\2\43\2\0\61\43\1\44\2\0\60\43"+
    "\2\45\3\0\57\45\1\0\1\51\67\0\1\53\5\0"+
    "\2\53\2\0\3\53\4\0\1\53\1\0\1\53\31\0"+
    "\1\53\1\0\1\54\3\0\60\54\5\0\1\53\5\0"+
    "\1\136\1\53\2\0\2\53\1\137\4\0\1\53\1\0"+
    "\1\53\31\0\1\53\16\0\2\63\52\0\1\53\5\0"+
    "\2\53\2\0\2\53\1\140\4\0\1\53\1\0\1\53"+
    "\31\0\1\53\10\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\27\70\10\0\1\53\1\0\1\70"+
    "\3\0\2\53\2\70\3\53\2\0\1\70\1\0\1\53"+
    "\1\0\1\141\1\0\27\70\1\0\1\53\10\0\1\70"+
    "\5\0\2\70\5\0\1\70\3\0\1\70\1\0\1\142"+
    "\26\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\1\143\26\70\12\0\1\70\5\0\2\70"+
    "\5\0\1\70\3\0\1\70\1\0\12\70\1\144\11\70"+
    "\1\145\2\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\5\70\1\146\5\70\1\147\1\150"+
    "\12\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\4\70\1\151\22\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\15\70\1\152"+
    "\11\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\5\70\1\153\21\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\1\154\16\70"+
    "\1\155\7\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\7\70\1\156\5\70\1\157\11\70"+
    "\12\0\1\70\5\0\2\70\5\0\1\70\3\0\1\70"+
    "\1\0\7\70\1\160\17\70\10\0\1\53\5\0\2\53"+
    "\2\0\3\53\4\0\1\53\1\0\1\53\31\0\1\161"+
    "\1\0\2\113\2\0\25\113\1\0\33\113\1\114\2\0"+
    "\25\113\1\0\32\113\34\0\1\162\66\0\1\163\10\0"+
    "\1\164\61\0\1\165\66\0\1\166\44\0\1\167\63\0"+
    "\1\170\3\0\1\171\62\0\1\172\62\0\1\173\75\0"+
    "\1\174\50\0\1\175\12\0\1\176\55\0\1\177\70\0"+
    "\1\172\50\0\1\200\67\0\1\201\25\0\1\136\3\0"+
    "\60\136\7\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\20\70\1\202\6\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\21\70\1\203"+
    "\5\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\20\70\1\204\6\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\16\70\1\205"+
    "\10\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\16\70\1\206\10\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\5\70\1\207"+
    "\21\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\21\70\1\210\5\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\3\70\1\211"+
    "\23\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\17\70\1\212\7\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\4\70\1\213"+
    "\22\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\4\70\1\214\22\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\21\70\1\215"+
    "\5\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\4\70\1\216\22\70\10\0\1\53\5\0"+
    "\2\53\2\0\3\53\4\0\1\53\1\0\1\53\31\0"+
    "\1\217\37\0\1\220\57\0\1\221\102\0\1\222\44\0"+
    "\1\223\100\0\1\224\54\0\1\175\63\0\1\225\61\0"+
    "\1\226\63\0\1\175\71\0\1\227\57\0\1\230\66\0"+
    "\1\175\60\0\1\231\100\0\1\175\43\0\1\175\35\0"+
    "\1\70\5\0\2\70\5\0\1\70\3\0\1\70\1\0"+
    "\4\70\1\232\22\70\12\0\1\70\5\0\2\70\5\0"+
    "\1\70\3\0\1\70\1\0\1\233\26\70\12\0\1\70"+
    "\5\0\2\70\5\0\1\70\3\0\1\70\1\0\4\70"+
    "\1\234\22\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\15\70\1\235\11\70\12\0\1\70"+
    "\5\0\2\70\5\0\1\70\3\0\1\70\1\0\15\70"+
    "\1\236\11\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\10\70\1\237\16\70\12\0\1\70"+
    "\5\0\2\70\5\0\1\70\3\0\1\70\1\0\22\70"+
    "\1\240\4\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\21\70\1\241\5\70\12\0\1\70"+
    "\5\0\2\70\5\0\1\70\3\0\1\70\1\0\5\70"+
    "\1\242\21\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\14\70\1\243\12\70\12\0\1\70"+
    "\5\0\2\70\5\0\1\70\3\0\1\70\1\0\1\244"+
    "\26\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\17\70\1\245\7\70\3\0\1\217\3\0"+
    "\60\217\52\0\1\246\65\0\1\247\45\0\1\250\72\0"+
    "\1\251\67\0\1\252\54\0\1\253\101\0\1\172\57\0"+
    "\1\126\63\0\1\254\51\0\1\255\30\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\17\70\1\256"+
    "\7\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\17\70\1\257\7\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\24\70\1\260"+
    "\2\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\12\70\1\261\14\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\10\70\1\262"+
    "\16\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\10\70\1\263\16\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\12\70\1\264"+
    "\14\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\4\70\1\265\22\70\55\0\1\175\55\0"+
    "\1\266\53\0\1\267\71\0\1\270\51\0\1\271\77\0"+
    "\1\172\51\0\1\272\77\0\1\167\24\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\21\70\1\273"+
    "\5\70\12\0\1\70\5\0\2\70\5\0\1\70\3\0"+
    "\1\70\1\0\21\70\1\274\5\70\12\0\1\70\5\0"+
    "\2\70\5\0\1\70\3\0\1\70\1\0\12\70\1\275"+
    "\4\70\1\276\7\70\12\0\1\70\5\0\2\70\5\0"+
    "\1\70\3\0\1\70\1\0\4\70\1\277\22\70\12\0"+
    "\1\70\5\0\2\70\5\0\1\70\3\0\1\70\1\0"+
    "\1\300\26\70\12\0\1\70\5\0\2\70\5\0\1\70"+
    "\3\0\1\70\1\0\24\70\1\301\2\70\56\0\1\175"+
    "\42\0\1\302\65\0\1\175\70\0\1\303\62\0\1\172"+
    "\32\0\1\70\5\0\2\70\5\0\1\70\3\0\1\70"+
    "\1\0\12\70\1\304\14\70\56\0\1\135\42\0\1\305"+
    "\77\0\1\306\52\0\1\307\72\0\1\310\55\0\1\311"+
    "\76\0\1\246\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8008];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\2\1\1\11\15\1\3\11\1\1\1\11\2\1\4\11"+
    "\1\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\12\1\1\11\1\1\1\11\2\1\3\11"+
    "\16\0\24\1\13\0\1\11\4\0\16\1\12\0\14\1"+
    "\10\0\10\1\5\0\7\1\2\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private ArrayDeque<Integer> indentationLevel = new ArrayDeque<>();

    private void handleWhiteSpace() {
        var len = yylength();
        if (indentationLevel.isEmpty()) {
            indentationLevel.addLast(len);
            yybegin(IN_OPEN);
            return;
        }
        var last = indentationLevel.getLast();
        if (last < len) {
            indentationLevel.addLast(len);
            yybegin(IN_OPEN);
        }
        else if (last == len) {
            yybegin(IN_OPEN);
        }
        else if (last > len) {
            indentationLevel.removeLast();
        }
    }

    private IElementType handleClose() {
        if (!indentationLevel.isEmpty()) {
            indentationLevel.clear();
            return null;
        }
        return null;
    }

    private IElementType l() {
        yybegin(IN_LINE);
        yypushback(yylength());
        return handleClose();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _IdrLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                var l = handleClose(); return l;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { var l = l(); if (l != null) return l;
            }
          // fall through
          case 65: break;
          case 2:
            { handleWhiteSpace(); return WHITE_SPACE;
            }
          // fall through
          case 66: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 67: break;
          case 4:
            { return LINE_COMMENT_TEXT;
            }
          // fall through
          case 68: break;
          case 5:
            { yybegin(YYINITIAL); return EOL;
            }
          // fall through
          case 69: break;
          case 6:
            { return DOC_COMMENT_TEXT;
            }
          // fall through
          case 70: break;
          case 7:
            { yypushback(1); yybegin(IN_LINE);
            }
          // fall through
          case 71: break;
          case 8:
            { return IDENTIFICATOR_SEP;
            }
          // fall through
          case 72: break;
          case 9:
            { return IDENTIFICATOR;
            }
          // fall through
          case 73: break;
          case 10:
            { yybegin(IN_LINE); return BAD_CHARACTER;
            }
          // fall through
          case 74: break;
          case 11:
            { return DIRECTIVE_CONTENT;
            }
          // fall through
          case 75: break;
          case 12:
            { return WHITE_SPACE;
            }
          // fall through
          case 76: break;
          case 13:
            { return STRING_CONTENT;
            }
          // fall through
          case 77: break;
          case 14:
            { yybegin(IN_LINE); return STRING_QUOTE;
            }
          // fall through
          case 78: break;
          case 15:
            { yypushback(1); yybegin(IN_LINE); return OPEN;
            }
          // fall through
          case 79: break;
          case 16:
            { return BAD_CHARACTER;
            }
          // fall through
          case 80: break;
          case 17:
            { yybegin(IN_STRING_LITERAL); return STRING_QUOTE;
            }
          // fall through
          case 81: break;
          case 18:
            { return OPERATOR;
            }
          // fall through
          case 82: break;
          case 19:
            { yybegin(IN_DIRECTIVE_START); yypushback(yylength() - 1);  return DIRECTIVE_START;
            }
          // fall through
          case 83: break;
          case 20:
            { yybegin(IN_CHAR_LITERAL); return CHAR_QUOTE;
            }
          // fall through
          case 84: break;
          case 21:
            { return LPAR;
            }
          // fall through
          case 85: break;
          case 22:
            { return RPAR;
            }
          // fall through
          case 86: break;
          case 23:
            { return COMMA;
            }
          // fall through
          case 87: break;
          case 24:
            { return INTEGER_LITERAL;
            }
          // fall through
          case 88: break;
          case 25:
            { return COLON_SIGN;
            }
          // fall through
          case 89: break;
          case 26:
            { return EQ_SIGN;
            }
          // fall through
          case 90: break;
          case 27:
            { return HOLE_MARKER;
            }
          // fall through
          case 91: break;
          case 28:
            { return PATTERN_NAME_SEP;
            }
          // fall through
          case 92: break;
          case 29:
            { yybegin(IN_ID); return IDENTIFICATOR;
            }
          // fall through
          case 93: break;
          case 30:
            { return LBRACKET;
            }
          // fall through
          case 94: break;
          case 31:
            { return BACKSLASH;
            }
          // fall through
          case 95: break;
          case 32:
            { return RBRACKET;
            }
          // fall through
          case 96: break;
          case 33:
            { return PLACEHOLDER;
            }
          // fall through
          case 97: break;
          case 34:
            { yybegin(IN_ESCAPED_NAME); return ESCAPED_NAME_QUOTE;
            }
          // fall through
          case 98: break;
          case 35:
            { return LBRACE;
            }
          // fall through
          case 99: break;
          case 36:
            { return OPT_SEP;
            }
          // fall through
          case 100: break;
          case 37:
            { return RBRACE;
            }
          // fall through
          case 101: break;
          case 38:
            { return ESCAPED_NAME;
            }
          // fall through
          case 102: break;
          case 39:
            { yybegin(IN_LINE); return ESCAPED_NAME_QUOTE;
            }
          // fall through
          case 103: break;
          case 40:
            { return CHAR_CONTENT;
            }
          // fall through
          case 104: break;
          case 41:
            { yybegin(IN_LINE); return CHAR_QUOTE;
            }
          // fall through
          case 105: break;
          case 42:
            { yybegin(IN_LINE_COMMENT);  yypushback(yylength() - 2); return LINE_COMMENT_START;
            }
          // fall through
          case 106: break;
          case 43:
            { return TYPE_SIGN;
            }
          // fall through
          case 107: break;
          case 44:
            { return ARROW_SIGN;
            }
          // fall through
          case 108: break;
          case 45:
            { return KW_IF;
            }
          // fall through
          case 109: break;
          case 46:
            { return KW_IN;
            }
          // fall through
          case 110: break;
          case 47:
            { return KW_OF;
            }
          // fall through
          case 111: break;
          case 48:
            { yybegin(IN_DIRECTIVE); return DIRECTIVE_TYPE;
            }
          // fall through
          case 112: break;
          case 49:
            { return KW_LET;
            }
          // fall through
          case 113: break;
          case 50:
            { yybegin(IN_DOC_COMMENT); yypushback(yylength() - 3); return DOC_COMMENT_START;
            }
          // fall through
          case 114: break;
          case 51:
            { return KW_CASE;
            }
          // fall through
          case 115: break;
          case 52:
            { return KW_DATA;
            }
          // fall through
          case 116: break;
          case 53:
            { return KW_ELSE;
            }
          // fall through
          case 117: break;
          case 54:
            { return KW_THEN;
            }
          // fall through
          case 118: break;
          case 55:
            { return KW_INFIX;
            }
          // fall through
          case 119: break;
          case 56:
            { return KW_TOTAL;
            }
          // fall through
          case 120: break;
          case 57:
            { return KW_WHERE;
            }
          // fall through
          case 121: break;
          case 58:
            { return KW_EXPORT;
            }
          // fall through
          case 122: break;
          case 59:
            { return KW_IMPORT;
            }
          // fall through
          case 123: break;
          case 60:
            { return KW_INFIXL;
            }
          // fall through
          case 124: break;
          case 61:
            { return KW_INFIXR;
            }
          // fall through
          case 125: break;
          case 62:
            { return KW_MODULE;
            }
          // fall through
          case 126: break;
          case 63:
            { return KW_PREFIX;
            }
          // fall through
          case 127: break;
          case 64:
            { return KW_PARTIAL;
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
